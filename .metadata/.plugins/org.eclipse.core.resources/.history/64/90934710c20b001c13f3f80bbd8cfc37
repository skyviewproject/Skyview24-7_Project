package com.example.skyview.Securirty;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import java.io.IOException;
import java.util.*;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import com.example.skyview.Services.MyUserDetailService;

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class SecurityConfig extends WebSecurityConfigurerAdapter
{
	@Autowired
	private MyUserDetailService udsvs;
	
	@Override
	   protected void configure(AuthenticationManagerBuilder auth) throws Exception 
	   {
	      auth.userDetailsService(udsvs);
	   }
	   
	   @Override
	   protected void configure(HttpSecurity http) throws Exception 
	   {
		   http.authorizeRequests()
		   	  .antMatchers("/admin").hasRole("ADMIN")
	          .antMatchers("/supervisior").hasAnyRole("ADMIN", "SUPERVISIOR")
	          .antMatchers("/resident").hasAnyRole("ADMIN", "RESIDENT")
	          .antMatchers("/common/**").hasAnyRole("ADMIN", "RESIDENT", "SUPERVISIOR")
	          .antMatchers("/signup").permitAll();
		   
		   http
		   .csrf() .disable()
	       .authorizeRequests().anyRequest().authenticated().and().sessionManagement()
	       .sessionCreationPolicy(SessionCreationPolicy.NEVER)
	       .and().cors();
	   }
	   
	   @Override
	   public void configure(WebSecurity web) throws Exception
	   {
	      web.ignoring().antMatchers(HttpMethod.OPTIONS, "/**");
	   }
	   
	   @Bean
	   public CorsConfigurationSource corsConfigurationSource() {
	       CorsConfiguration configuration = new CorsConfiguration();
	       configuration.setAllowedOrigins(Arrays.asList("*"));
	       configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"));
	       configuration.setAllowedHeaders(Arrays.asList("authorization", "content-type", "x-auth-token"));
	       configuration.setExposedHeaders(Arrays.asList("x-auth-token"));
	       UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
	       source.registerCorsConfiguration("/**", configuration);
	       return source;
	   }
	   
	   @Override
	   @Bean
	   public AuthenticationManager authenticationManagerBean() throws Exception 
	   {
	      return super.authenticationManagerBean();
	   }
	   
	   /*@Bean
	    public BCryptPasswordEncoder passwordEncoder() {
	        return new BCryptPasswordEncoder();
	    }*/
	   
	   @Bean
	   public PasswordEncoder getPasswordEncoder() 
	   {
	       return NoOpPasswordEncoder.getInstance();
	   }
}

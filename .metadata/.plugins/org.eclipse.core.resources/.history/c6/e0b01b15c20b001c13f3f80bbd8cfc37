package com.example.skyview.Securirty;
import java.util.ArrayList;
import java.util.*;
import org.apache.catalina.filters.CorsFilter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;
import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;
import org.springframework.security.oauth2.provider.token.DefaultTokenServices;
import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;
import org.springframework.security.oauth2.provider.token.store.JwtTokenStore;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

@SuppressWarnings("deprecation")
@Configuration
public class Oauth2ServerConfig extends AuthorizationServerConfigurerAdapter
{
   private String clientid = "SkyView24*7_ClientId";
   private String clientSecret = "sk2y*vi4ew7_secret";
   private String privateKey = "SkyView24*7_Key";
   private String publicKey = "SkyView24*7_Key";

   @Autowired
   @Qualifier("authenticationManagerBean")
   private AuthenticationManager authenticationManager;
   
   @Bean
   public JwtAccessTokenConverter tokenEnhancer() 
   {
      JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
      converter.setSigningKey(privateKey);
      converter.setVerifierKey(publicKey);
      return converter;
   }
   
   @Bean
   public JwtTokenStore tokenStore() 
   {
      return new JwtTokenStore(tokenEnhancer());
   }
   
   @Override
   public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception 
   {
      endpoints.authenticationManager(authenticationManager).tokenStore(tokenStore())
      .accessTokenConverter(tokenEnhancer());
   }
   
   @Override
   public void configure(AuthorizationServerSecurityConfigurer security) throws Exception 
   {
      security.tokenKeyAccess("permitAll()").checkTokenAccess("isAuthenticated()");
      
      UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
      CorsConfiguration config = new CorsConfiguration();
      config.applyPermitDefaultValues();

      // Maybe there's a way to use config from AuthorizationServerEndpointsConfigurer endpoints?
      source.registerCorsConfiguration("/**", config);
      CorsFilter filter = new CorsFilter();
      
      filter.getAllowedHttpHeaders();
      filter.getExposedHeaders();
      filter.getAllowedOrigins();
      
      security.addTokenEndpointAuthenticationFilter(filter);
   }
   
   
   @Override
   public void configure(ClientDetailsServiceConfigurer clients) throws Exception 
   {
      clients.inMemory().withClient(clientid).secret(clientSecret).scopes("read", "write")
         .authorizedGrantTypes("password", "refresh_token").accessTokenValiditySeconds(20000)
         .refreshTokenValiditySeconds(20000);

   }
}
